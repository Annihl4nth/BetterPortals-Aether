buildscript {
    ext.kotlin_version = '1.3.10'
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://repo.spongepowered.org/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

ext {
    mixinDep = 'org.spongepowered:mixin:0.7.11-SNAPSHOT'
    twilightforestDepBase = 'the-twilight-forest:twilightforest-1.12.2:3.9.984'
    twilightforestDep = "$twilightforestDepBase:universal"
    mekanismDepBase = 'mekanism:Mekanism:1.12.2'
    mekanismDep = "$mekanismDepBase:9.7.9.380" // yes, the classifier is the version (really, CF?!)...
    aetherDepBase = 'the-aether:aether_legacy:1.12.2'
    aetherDep = "$aetherDepBase:v1.4.4"
    cubicChunksDepBase = 'opencubicchunks:CubicChunks-1.12.2-0.0.970.0:SNAPSHOT'
    cubicChunksDep = "$cubicChunksDepBase:all"
}

version = determineVersion()
group = "de.johni0702.minecraft"
archivesBaseName = "betterportals"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

sourceSets {
    view {
        compileClasspath += sourceSets.api.compileClasspath
        compileClasspath += sourceSets.api.output
    }
    transition {
        compileClasspath += sourceSets.api.compileClasspath
        compileClasspath += sourceSets.api.output
    }
    portal {
        compileClasspath += sourceSets.api.compileClasspath
        compileClasspath += sourceSets.api.output
    }
    vanilla {
        compileClasspath += sourceSets.api.compileClasspath
        compileClasspath += sourceSets.api.output
    }
    twilightforest {
        compileClasspath += sourceSets.api.compileClasspath
        compileClasspath += sourceSets.api.output
    }
    mekanism {
        compileClasspath += sourceSets.api.compileClasspath
        compileClasspath += sourceSets.api.output
    }
    aether {
        compileClasspath += sourceSets.api.compileClasspath
        compileClasspath += sourceSets.api.output
    }
    main {
        compileClasspath += sourceSets.view.output
        compileClasspath += sourceSets.transition.output
        compileClasspath += sourceSets.portal.output
        compileClasspath += sourceSets.vanilla.output
        compileClasspath += sourceSets.twilightforest.output
        compileClasspath += sourceSets.mekanism.output
        compileClasspath += sourceSets.aether.output
    }
    integrationTest {
        compileClasspath += sourceSets.main.compileClasspath
        compileClasspath += sourceSets.main.output
    }
}

minecraft {
    // Note: For development, either uncomment the following line or manually add -Dfml.coreMods.load=de.johni0702.minecraft.betterportals.impl.MixinLoader
    //       to the jvm arguments.
    // coreMod = "de.johni0702.minecraft.betterportals.impl.MixinLoader"
    version = "1.12.2-14.23.5.2838"
    runDir = "run"
    mappings = "snapshot_20171003"
}

mixin {
    add sourceSets.view, "mixins.betterportals.view.refmap.json"
    add sourceSets.transition, "mixins.betterportals.transition.refmap.json"
    add sourceSets.portal, "mixins.betterportals.refmap.json"
    add sourceSets.integrationTest, "mixins.betterportals.test.refmap.json"
    extraSrgFile "searge", "extra.srg"
}

repositories {
    maven {
        name = "SpongePowered Repo"
        url = "http://repo.spongepowered.org/maven/"
    }
    mavenCentral()
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    jcenter()
    maven {
        name = "Shadowfacts"
        url = "https://maven.shadowfacts.net"
    }
}

configurations {
    shade
    compile.extendsFrom shade
    integrationTest.extendsFrom main
}

dependencies {
    compile 'net.shadowfacts:Forgelin:1.8.2'

    def withoutOldMixinDeps = {
        exclude group: 'com.google.guava' // 17.0
        exclude group: 'com.google.code.gson' // 2.2.4
    }
    runtime mixinDep, withoutOldMixinDeps
    viewCompile mixinDep, withoutOldMixinDeps
    portalCompile mixinDep, withoutOldMixinDeps

    // We want FG to deobf our mod-deps for us.
    // However FG sucks and doesn't support non-standard source sets, so we need to use this workaround...
    // Might need to run `./gradlew deobfCompileDummyTask` before importing into IDEA (doesn't happen automatically).

    deobfCompile cubicChunksDep
    runtime "deobf.$cubicChunksDepBase"
    viewCompile "deobf.$cubicChunksDepBase"

    deobfCompile twilightforestDep
    runtime "deobf.$twilightforestDepBase"
    twilightforestCompile "deobf.$twilightforestDepBase"

    deobfCompile mekanismDep
    runtime "deobf.$mekanismDepBase"
    mekanismCompile "deobf.$mekanismDepBase"
    // Mekanism deps (cause CF and/or FG break transitive dependencies)
    deobfCompile 'redstone-flux:RedstoneFlux-1.12:2.1.0.6:universal'
    mekanismCompile 'deobf.redstone-flux:RedstoneFlux-1.12:2.1.0.6'
    deobfCompile 'industrial-craft:Industrialcraft-2-2.8.111:ex112:api'
    mekanismCompile 'deobf.industrial-craft:Industrialcraft-2-2.8.111:ex112'

    deobfCompile aetherDep
    runtime "deobf.$aetherDepBase"
    aetherCompile "deobf.$aetherDepBase"

    integrationTestCompile 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
    integrationTestCompile 'org.junit.platform:junit-platform-launcher:1.5.0'
    integrationTestCompile 'io.kotlintest:kotlintest-runner-junit5:3.4.0'
    integrationTestRuntimeOnly configurations.forgeGradleGradleStart
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    from ({files(configurations.runtime.findAll {it.name.startsWith 'mixin-'} + configurations.shade)
            .collect {it.isDirectory() ? it : zipTree(it)}}) {
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.RSA'
    }
    from sourceSets.api.output
    from sourceSets.view.output
    from sourceSets.transition.output
    from sourceSets.portal.output
    from sourceSets.vanilla.output
    from sourceSets.twilightforest.output
    from sourceSets.mekanism.output
    from sourceSets.aether.output
    exclude 'de/johni0702/minecraft/betterportals/MixinLoader.class'
    exclude 'mixins.betterportals.test.refmap.json' // MixinGradle is being stupid
    manifest {
        attributes 'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': '0',
                'ForceLoadAsMod': 'true',
                'FMLCorePluginContainsFMLMod': 'true',
                'MixinConfigs': 'mixins.betterportals.json,mixins.betterportals.view.json',
                'FMLAT': 'betterportals_at.cfg'
    }
}

task copySrg(type: Copy, dependsOn: 'genSrgs') {
    from {project.tasks.genSrgs.mcpToSrg}
    into 'build'
}

setupDecompWorkspace.dependsOn copySrg
setupDevWorkspace.dependsOn copySrg
project.tasks.idea.dependsOn copySrg

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task runIntegrationTest(type: JavaExec) {
    dependsOn tasks.jar
    dependsOn tasks.makeStart

    main = 'GradleStart'
    standardOutput = System.out
    errorOutput = System.err
    enableAssertions = true

    def testDir = new File(project.buildDir, "integration-test")
    args "--gameDir", testDir.canonicalPath
    workingDir testDir
    doFirst {
        testDir.deleteDir()
        testDir.mkdirs()
    }

    // Default MC/Forge deps
    classpath configurations.runtime
    classpath configurations.forgeGradleMc
    classpath configurations.forgeGradleMcDeps
    classpath configurations.forgeGradleGradleStart
    // Base mod
    classpath tasks.jar.archivePath
    // Test classes and deps
    classpath sourceSets.integrationTest.output
    classpath configurations.integrationTestCompile

    systemProperty "fml.noGrab", "true"
    systemProperty "fml.coreMods.load", "de.johni0702.minecraft.betterportals.impl.TestLoader"
}

def determineVersion() {
    def latestVersion = file('version.txt').readLines().first()
    def releaseCommit = command('git', 'blame', '-p', '-l', 'version.txt').first().tokenize(' ').first()
    def currentCommit = command('git', 'rev-parse', 'HEAD').first()
    def version
    if (releaseCommit == currentCommit) {
        version = latestVersion
    } else {
        def diff = command('git', 'log', '--format=oneline', "$releaseCommit..$currentCommit").size()
        version = "$latestVersion-$diff-g${currentCommit.substring(0, 7)}"
    }
    if (!command('git', 'status', '--porcelain').empty) {
        version = "$version*"
    }
    return version
}

def command(Object...cmd) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine cmd
        standardOutput = stdout
    }
    return stdout.toString().tokenize('\n')
}
