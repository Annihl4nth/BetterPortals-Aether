buildscript {
    ext.kotlin_version = '1.2.41'
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://repo.spongepowered.org/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

// Source sets need to be created after FG but before kotlin because FG does broken stuff in createSourceCopyTasks
sourceSets {
    create 'annotations'
}

apply plugin: 'kotlin'
apply plugin: 'org.spongepowered.mixin'

version = determineVersion()
group = "de.johni0702.minecraft"
archivesBaseName = "betterportals"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    coreMod = "de.johni0702.minecraft.betterportals.MixinLoader"
    version = "1.12.2-14.23.3.2669"
    runDir = "run"
    mappings = "snapshot_20171003"
}

mixin {
    add sourceSets.main, "mixins.betterportals.refmap.json"
}

repositories {
    maven {
        name = "SpongePowered Repo"
        url = "http://repo.spongepowered.org/maven/"
    }
    mavenCentral()
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
}

sourceSets {
    annotations {
        kotlin.srcDirs = [file('src/annotations')]
        resources.srcDirs = [file('src/annotations')]
    }
}

configurations {
    shade
    compile.extendsFrom shade
    compile.extendsFrom annotations
}

dependencies {
    compile 'org.spongepowered:mixin:0.7.5-SNAPSHOT'
    compile 'the-twilight-forest:twilightforest-1.12.2:3.6.345:universal'
    shade "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"

    testCompile 'io.kotlintest:kotlintest-runner-junit5:3.0.4'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    from ({files(configurations.compile.findAll {it.name.startsWith 'mixin-'} + configurations.shade)
            .collect {it.isDirectory() ? it : zipTree(it)}})
    manifest {
        attributes 'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': '0',
                'FMLCorePluginContainsFMLMod': 'true',
                'FMLAT': 'betterportals_at.cfg'
    }
}

task copySrg(type: Copy, dependsOn: 'genSrgs') {
    from {project.tasks.genSrgs.mcpToSrg}
    into 'build'
}

setupDecompWorkspace.dependsOn copySrg
setupDevWorkspace.dependsOn copySrg
project.tasks.idea.dependsOn copySrg

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

def determineVersion() {
    def latestVersion = file('version.txt').readLines().first()
    def releaseCommit = command('git', 'blame', '-p', '-l', 'version.txt').first().tokenize(' ').first()
    def currentCommit = command('git', 'rev-parse', 'HEAD').first()
    def version
    if (releaseCommit == currentCommit) {
        version = latestVersion
    } else {
        def diff = command('git', 'log', '--format=oneline', "$releaseCommit..$currentCommit").size()
        version = "$latestVersion-$diff-g${currentCommit.substring(0, 7)}"
    }
    if (!command('git', 'status', '--porcelain').empty) {
        version = "$version*"
    }
    return version
}

def command(Object...cmd) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine cmd
        standardOutput = stdout
    }
    return stdout.toString().tokenize('\n')
}
